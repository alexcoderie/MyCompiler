Token { type: STRUCT, literal: "struct", line: 1, column: 1 }
Token { type: ID, literal: "Pt", line: 1, column: 9 }
Token { type: LACC, literal: "{", line: 1, column: 12 }
Token { type: INT, literal: "int", line: 2, column: 2 }
Token { type: ID, literal: "x", line: 2, column: 7 }
Token { type: COMMA, literal: ",", line: 2, column: 9 }
Token { type: ID, literal: "y", line: 2, column: 10 }
Token { type: SEMICOLON, literal: ";", line: 2, column: 12 }
Token { type: RACC, literal: "}", line: 3, column: 2 }
Token { type: SEMICOLON, literal: ";", line: 3, column: 3 }
Token { type: STRUCT, literal: "struct", line: 5, column: 1 }
Token { type: ID, literal: "Pt", line: 5, column: 9 }
Token { type: ID, literal: "points", line: 5, column: 14 }
Token { type: LBRACKET, literal: "[", line: 5, column: 21 }
Token { type: CT_INT, literal: "20", line: 5, column: 22 }
Token { type: DIV, literal: "/", line: 5, column: 25 }
Token { type: CT_INT, literal: "4", line: 5, column: 26 }
Token { type: ADD, literal: "+", line: 5, column: 28 }
Token { type: CT_INT, literal: "5", line: 5, column: 29 }
Token { type: RBRACKET, literal: "]", line: 5, column: 31 }
Token { type: SEMICOLON, literal: ";", line: 5, column: 32 }
Token { type: INT, literal: "int", line: 7, column: 1 }
Token { type: ID, literal: "count", line: 7, column: 7 }
Token { type: LPAR, literal: "(", line: 7, column: 13 }
Token { type: RPAR, literal: ")", line: 7, column: 14 }
Token { type: LACC, literal: "{", line: 8, column: 1 }
Token { type: INT, literal: "int", line: 9, column: 2 }
Token { type: ID, literal: "i", line: 9, column: 8 }
Token { type: COMMA, literal: ",", line: 9, column: 10 }
Token { type: ID, literal: "n", line: 9, column: 11 }
Token { type: SEMICOLON, literal: ";", line: 9, column: 13 }
Token { type: FOR, literal: "for", line: 10, column: 2 }
Token { type: LPAR, literal: "(", line: 10, column: 6 }
Token { type: ID, literal: "i", line: 10, column: 7 }
Token { type: ASSIGN, literal: "=", line: 10, column: 9 }
Token { type: ID, literal: "n", line: 10, column: 10 }
Token { type: ASSIGN, literal: "=", line: 10, column: 12 }
Token { type: CT_INT, literal: "0", line: 10, column: 13 }
Token { type: SEMICOLON, literal: ";", line: 10, column: 14 }
Token { type: ID, literal: "i", line: 10, column: 15 }
Token { type: LESS, literal: "<", line: 10, column: 17 }
Token { type: CT_INT, literal: "10", line: 10, column: 18 }
Token { type: SEMICOLON, literal: ";", line: 10, column: 21 }
Token { type: ID, literal: "i", line: 10, column: 22 }
Token { type: ASSIGN, literal: "=", line: 10, column: 24 }
Token { type: ID, literal: "i", line: 10, column: 25 }
Token { type: ADD, literal: "+", line: 10, column: 27 }
Token { type: CT_INT, literal: "1", line: 10, column: 28 }
Token { type: RPAR, literal: ")", line: 10, column: 30 }
Token { type: LACC, literal: "{", line: 10, column: 31 }
Token { type: IF, literal: "if", line: 11, column: 3 }
Token { type: LPAR, literal: "(", line: 11, column: 6 }
Token { type: ID, literal: "points", line: 11, column: 7 }
Token { type: LBRACKET, literal: "[", line: 11, column: 14 }
Token { type: ID, literal: "i", line: 11, column: 15 }
Token { type: RBRACKET, literal: "]", line: 11, column: 17 }
Token { type: DOT, literal: ".", line: 11, column: 18 }
Token { type: ID, literal: "x", line: 11, column: 19 }
Token { type: GREATEREQ, literal: ">=", line: 11, column: 21 }
Token { type: CT_INT, literal: "0", line: 11, column: 23 }
Token { type: AND, literal: "&&", line: 11, column: 24 }
Token { type: ID, literal: "points", line: 11, column: 26 }
Token { type: LBRACKET, literal: "[", line: 11, column: 33 }
Token { type: ID, literal: "i", line: 11, column: 34 }
Token { type: RBRACKET, literal: "]", line: 11, column: 36 }
Token { type: DOT, literal: ".", line: 11, column: 37 }
Token { type: ID, literal: "y", line: 11, column: 38 }
Token { type: GREATEREQ, literal: ">=", line: 11, column: 40 }
Token { type: CT_INT, literal: "0", line: 11, column: 42 }
Token { type: RPAR, literal: ")", line: 11, column: 43 }
Token { type: ID, literal: "n", line: 11, column: 44 }
Token { type: ASSIGN, literal: "=", line: 11, column: 46 }
Token { type: ID, literal: "n", line: 11, column: 47 }
Token { type: ADD, literal: "+", line: 11, column: 49 }
Token { type: CT_INT, literal: "1", line: 11, column: 50 }
Token { type: SEMICOLON, literal: ";", line: 11, column: 52 }
Token { type: RACC, literal: "}", line: 12, column: 3 }
Token { type: RETURN, literal: "return", line: 13, column: 2 }
Token { type: ID, literal: "n", line: 13, column: 10 }
Token { type: SEMICOLON, literal: ";", line: 13, column: 12 }
Token { type: RACC, literal: "}", line: 14, column: 1 }
Token { type: VOID, literal: "void", line: 16, column: 1 }
Token { type: ID, literal: "main", line: 16, column: 7 }
Token { type: LPAR, literal: "(", line: 16, column: 12 }
Token { type: RPAR, literal: ")", line: 16, column: 13 }
Token { type: LACC, literal: "{", line: 17, column: 1 }
Token { type: ID, literal: "put_i", line: 18, column: 2 }
Token { type: LPAR, literal: "(", line: 18, column: 8 }
Token { type: ID, literal: "count", line: 18, column: 9 }
Token { type: LPAR, literal: "(", line: 18, column: 15 }
Token { type: RPAR, literal: ")", line: 18, column: 16 }
Token { type: RPAR, literal: ")", line: 18, column: 17 }
Token { type: SEMICOLON, literal: ";", line: 18, column: 18 }
Token { type: RACC, literal: "}", line: 19, column: 1 }
