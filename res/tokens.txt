Token { type: VOID, literal: "void", line: 4, column: 1 }
Token { type: ID, literal: "main", line: 4, column: 7 }
Token { type: LPAR, literal: "(", line: 4, column: 12 }
Token { type: RPAR, literal: ")", line: 4, column: 13 }
Token { type: LACC, literal: "{", line: 5, column: 1 }
Token { type: IF, literal: "if", line: 6, column: 2 }
Token { type: LPAR, literal: "(", line: 6, column: 5 }
Token { type: CT_INT, literal: "0xc", line: 6, column: 6 }
Token { type: EQUAL, literal: "==", line: 6, column: 10 }
Token { type: CT_INT, literal: "014", line: 6, column: 12 }
Token { type: RPAR, literal: ")", line: 6, column: 16 }
Token { type: ID, literal: "put_s", line: 6, column: 17 }
Token { type: LPAR, literal: "(", line: 6, column: 23 }
Token { type: CT_STRING, literal: "\"\\\"egal\\\"\\t\\t(h,o)\"", line: 6, column: 24 }
Token { type: RPAR, literal: ")", line: 6, column: 44 }
Token { type: SEMICOLON, literal: ";", line: 6, column: 45 }
Token { type: ELSE, literal: "else", line: 7, column: 3 }
Token { type: ID, literal: "put_s", line: 7, column: 9 }
Token { type: LPAR, literal: "(", line: 7, column: 15 }
Token { type: CT_STRING, literal: "\"\\\"inegal\\\"\\t\\t(h,o)\"", line: 7, column: 16 }
Token { type: RPAR, literal: ")", line: 7, column: 38 }
Token { type: SEMICOLON, literal: ";", line: 7, column: 39 }
Token { type: IF, literal: "if", line: 8, column: 2 }
Token { type: LPAR, literal: "(", line: 8, column: 5 }
Token { type: CT_REAL, literal: "20E-1", line: 8, column: 6 }
Token { type: EQUAL, literal: "==", line: 8, column: 12 }
Token { type: CT_REAL, literal: "2.0", line: 8, column: 14 }
Token { type: AND, literal: "&&", line: 8, column: 18 }
Token { type: CT_REAL, literal: "0.2e+1", line: 8, column: 20 }
Token { type: EQUAL, literal: "==", line: 8, column: 27 }
Token { type: CT_INT, literal: "0x2", line: 8, column: 29 }
Token { type: RPAR, literal: ")", line: 8, column: 33 }
Token { type: ID, literal: "put_c", line: 8, column: 34 }
Token { type: LPAR, literal: "(", line: 8, column: 40 }
Token { type: CT_CHAR, literal: "'='", line: 8, column: 41 }
Token { type: RPAR, literal: ")", line: 8, column: 45 }
Token { type: SEMICOLON, literal: ";", line: 8, column: 46 }
Token { type: ELSE, literal: "else", line: 9, column: 3 }
Token { type: ID, literal: "put_c", line: 9, column: 9 }
Token { type: LPAR, literal: "(", line: 9, column: 15 }
Token { type: CT_CHAR, literal: "'\\\\'", line: 9, column: 16 }
Token { type: RPAR, literal: ")", line: 9, column: 21 }
Token { type: SEMICOLON, literal: ";", line: 9, column: 22 }
Token { type: RACC, literal: "}", line: 10, column: 1 }
