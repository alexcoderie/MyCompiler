Token { type: DIV, literal: "/", line: 1, column: 2 }
Token { type: MUL, literal: "*", line: 1, column: 3 }
Token { type: ID, literal: "testare", line: 1, column: 2 }
Token { type: ID, literal: "analizor", line: 1, column: 11 }
Token { type: ID, literal: "lexical", line: 1, column: 21 }
Token { type: MUL, literal: "*", line: 1, column: 2 }
Token { type: DIV, literal: "/", line: 1, column: 3 }
Token { type: VOID, literal: "void", line: 1, column: 2 }
Token { type: ID, literal: "main", line: 1, column: 8 }
Token { type: LPAR, literal: "(", line: 1, column: 13 }
Token { type: RPAR, literal: ")", line: 1, column: 14 }
Token { type: LACC, literal: "{", line: 1, column: 2 }
Token { type: IF, literal: "if", line: 1, column: 3 }
Token { type: LPAR, literal: "(", line: 1, column: 6 }
Token { type: CT_INT, literal: "0xc", line: 1, column: 7 }
Token { type: EQUAL, literal: "==", line: 1, column: 11 }
Token { type: CT_INT, literal: "014", line: 1, column: 13 }
Token { type: RPAR, literal: ")", line: 1, column: 17 }
Token { type: ID, literal: "put_s", line: 1, column: 18 }
Token { type: LPAR, literal: "(", line: 1, column: 24 }
Token { type: CT_STRING, literal: "\"\\\"egal\\\"\\t\\t(h,o)\"", line: 1, column: 25 }
Token { type: RPAR, literal: ")", line: 1, column: 45 }
Token { type: SEMICOLON, literal: ";", line: 1, column: 46 }
Token { type: ELSE, literal: "else", line: 1, column: 4 }
Token { type: ID, literal: "put_s", line: 1, column: 10 }
Token { type: LPAR, literal: "(", line: 1, column: 16 }
Token { type: CT_STRING, literal: "\"\\\"inegal\\\"\\t\\t(h,o)\"", line: 1, column: 17 }
Token { type: RPAR, literal: ")", line: 1, column: 39 }
Token { type: SEMICOLON, literal: ";", line: 1, column: 40 }
Token { type: IF, literal: "if", line: 1, column: 3 }
Token { type: LPAR, literal: "(", line: 1, column: 6 }
Token { type: CT_REAL, literal: "20E-1", line: 1, column: 7 }
Token { type: EQUAL, literal: "==", line: 1, column: 13 }
Token { type: CT_REAL, literal: "2.0", line: 1, column: 15 }
Token { type: AND, literal: "&&", line: 1, column: 19 }
Token { type: CT_REAL, literal: "0.2e+1", line: 1, column: 21 }
Token { type: EQUAL, literal: "==", line: 1, column: 28 }
Token { type: CT_INT, literal: "0x2", line: 1, column: 30 }
Token { type: RPAR, literal: ")", line: 1, column: 34 }
Token { type: ID, literal: "put_c", line: 1, column: 35 }
Token { type: LPAR, literal: "(", line: 1, column: 41 }
Token { type: CT_CHAR, literal: "'='", line: 1, column: 42 }
Token { type: RPAR, literal: ")", line: 1, column: 46 }
Token { type: SEMICOLON, literal: ";", line: 1, column: 47 }
Token { type: DIV, literal: "/", line: 1, column: 50 }
Token { type: DIV, literal: "/", line: 1, column: 51 }
Token { type: CT_INT, literal: "2", line: 1, column: 53 }
Token { type: ID, literal: "scris", line: 1, column: 56 }
Token { type: ID, literal: "in", line: 1, column: 63 }
Token { type: ID, literal: "diverse", line: 1, column: 67 }
Token { type: ID, literal: "feluri", line: 1, column: 76 }
Token { type: ELSE, literal: "else", line: 1, column: 4 }
Token { type: ID, literal: "put_c", line: 1, column: 10 }
Token { type: LPAR, literal: "(", line: 1, column: 16 }
Token { type: CT_CHAR, literal: "'\\\\'", line: 1, column: 17 }
Token { type: RPAR, literal: ")", line: 1, column: 22 }
Token { type: SEMICOLON, literal: ";", line: 1, column: 23 }
Token { type: RACC, literal: "}", line: 1, column: 2 }
